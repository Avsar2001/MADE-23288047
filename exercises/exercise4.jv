// pipeline to dump "Temperatures" Data into sqlite
pipeline TemperaturesPipeline {

    TemperaturesHttpExtractor
        -> TemperaturesArchiveInterpreter
        -> TemperaturesFilePicker
        -> TemperaturesTextFileInterpreter
        -> TemperaturesCSVInterpreter
        -> TemperaturesColumnDeleter
        -> TemperaturesCellWriter
        -> TemperaturesTableInterpreter
        -> TemperatureTransformer
        -> BatteryTemperatureTransformer
        -> TemperaturesSQLiteLoader;

    block TemperaturesHttpExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // To Extract the .zip file
    // Creates a folder with the same name as the zip file
    block TemperaturesArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // To choose the file to be processed from the extracted folder
    block TemperaturesFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // To interpret the file as a text file
    block TemperaturesTextFileInterpreter oftype TextFileInterpreter {}

    // To interpret the text file as a CSV file
    // Delimiter is set to ";"
    block TemperaturesCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // To delete columns F, G, H, I
    // F: Latitude (WGS84)
    // G: Longitude (WGS84) 
    // H: Verschleierung (m) 
    // I: Aufenthaltsdauer im Freien (ms)
    block TemperaturesColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I ];
    }

    // To write the headers into the cells A1:F1
    // Exe. goal: Translate/rename column headers from German to English
    block TemperaturesCellWriter oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    // Filter only columns mentioned in the columns list
    // Data types of the columns are also mentioned
    block TemperaturesTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveIntegerType,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // To convert the 'temperature' column values from Celsius to Fahrenheit
    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheitTransformer;
    }

    // To convert the 'battery_temperature' column values from Celsius to Fahrenheit
    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheitTransformer;
    }

    block TemperaturesSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }
}

// Vaue type & constraint for positive integers
// Used for the "id" column - To remove zero value rows
valuetype PositiveIntegerType oftype integer {
    constraints: [ PositiveIntegerConstraint ];
}

constraint PositiveIntegerConstraint oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
}

// Value type & constraint for months
// Used for the "month" column - To remove rows with months outside the range 1-12
valuetype MonthType oftype integer {
    constraints: [ MonthConstraint ];
}

constraint MonthConstraint oftype RangeConstraint {
    lowerBound: 1;
    upperBound: 12;
}

// Transformer to convert Celsius to Fahrenheit
transform CelsiusToFahrenheitTransformer {
    from Celsius oftype decimal;
    to Fahrenheit oftype decimal;
    Fahrenheit: (Celsius * 9/5) + 32;
}